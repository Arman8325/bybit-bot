import telebot
import pandas as pd
import sqlite3
import time
import threading
from pybit.unified_trading import HTTP
from ta import trend, momentum, volatility, volume
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–ë–û–¢_–¢–û–ö–ï–ù'
API_KEY = '–í–ê–®_BYBIT_API_KEY'
API_SECRET = '–í–ê–®_BYBIT_API_SECRET'
import telebot
import pandas as pd
import sqlite3
import time
import threading
from pybit.unified_trading import HTTP
from ta import trend, momentum, volatility, volume
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–ë–û–¢_–¢–û–ö–ï–ù'
API_KEY = '–í–ê–®_BYBIT_API_KEY'
API_SECRET = '–í–ê–®_BYBIT_API_SECRET'
AUTHORIZED_USER_ID = 1311705654

bot = telebot.TeleBot(BOT_TOKEN)
session = HTTP(api_key=API_KEY, api_secret=API_SECRET)

# === –°–û–ó–î–ê–ù–ò–ï –ë–î ===
conn = sqlite3.connect('accuracy.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS predictions
              (timestamp TEXT, prediction TEXT, result TEXT)''')
conn.commit()

# === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
def get_klines(symbol="BTCUSDT", interval="15", limit=100):
    data = session.get_kline(
        category="linear",
        symbol=symbol,
        interval=interval,
        limit=limit
    )["result"]["list"]
    df = pd.DataFrame(data, columns=["timestamp", "open", "high", "low", "close", "volume", "turnover"])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df[["open", "high", "low", "close", "volume"]] = df[["open", "high", "low", "close", "volume"]].astype(float)
    return df

# === –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
def calculate_indicators(df):
    df["rsi"] = momentum.RSIIndicator(df["close"]).rsi()
    df["ema21"] = trend.EMAIndicator(df["close"], window=21).ema_indicator()
    df["adx"] = trend.ADXIndicator(df["high"], df["low"], df["close"]).adx()
    df["cci"] = trend.CCIIndicator(df["high"], df["low"], df["close"]).cci()
    df["stoch_k"] = momentum.StochasticOscillator(df["high"], df["low"], df["close"]).stoch()
    df["roc"] = momentum.ROCIndicator(df["close"]).roc()
    df["sma20"] = trend.SMAIndicator(df["close"], window=20).sma_indicator()
    bb = volatility.BollingerBands(df["close"])
    df["bb_bbm"] = bb.bollinger_mavg()
    df["wr"] = momentum.WilliamsRIndicator(df["high"], df["low"], df["close"]).williams_r()
    df["obv"] = volume.OnBalanceVolumeIndicator(df["close"], df["volume"]).on_balance_volume()
    df.dropna(inplace=True)
    return df

# === –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï ===
def make_prediction(df):
    last = df.iloc[-1]
    votes = []

    if last["rsi"] < 30: votes.append("long")
    elif last["rsi"] > 70: votes.append("short")

    if last["close"] > last["ema21"]: votes.append("long")
    else: votes.append("short")

    if last["adx"] > 25: votes.append("trend")
    if last["cci"] > 100: votes.append("long")
    elif last["cci"] < -100: votes.append("short")

    if last["stoch_k"] < 20: votes.append("long")
    elif last["stoch_k"] > 80: votes.append("short")

    if last["roc"] > 0: votes.append("long")
    else: votes.append("short")

    if last["close"] > last["sma20"]: votes.append("long")
    else: votes.append("short")

    if last["close"] > last["bb_bbm"]: votes.append("long")
    else: votes.append("short")

    if last["wr"] < -80: votes.append("long")
    elif last["wr"] > -20: votes.append("short")

    long_votes = votes.count("long")
    short_votes = votes.count("short")

    if long_votes > short_votes:
        return "LONG"
    elif short_votes > long_votes:
        return "SHORT"
    else:
        return "NEUTRAL"

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
@bot.message_handler(commands=["start", "signal"])
def handle_command(message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        return

    if message.text == "/start":
        bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /signal –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
    elif message.text == "/signal":
        df = calculate_indicators(get_klines())
        prediction = make_prediction(df)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO predictions (timestamp, prediction, result) VALUES (?, ?, ?)", (timestamp, prediction, "pending"))
        conn.commit()
        bot.send_message(message.chat.id, f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 15 –º–∏–Ω—É—Ç: *{prediction}*", parse_mode="Markdown")

# === –ê–í–¢–û–ü–†–û–ì–ù–û–ó ===
def auto_update():
    while True:
        try:
            df = calculate_indicators(get_klines())
            prediction = make_prediction(df)
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("INSERT INTO predictions (timestamp, prediction, result) VALUES (?, ?, ?)", (timestamp, prediction, "pending"))
            conn.commit()
            bot.send_message(AUTHORIZED_USER_ID, f"üîÑ –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑: *{prediction}*", parse_mode="Markdown")
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è]: {e}")
        time.sleep(15 * 60)

threading.Thread(target=auto_update, daemon=True).start()

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
bot.polling(none_stop=True)


bot = telebot.TeleBot(BOT_TOKEN)
session = HTTP(api_key=API_KEY, api_secret=API_SECRET)

# === –°–û–ó–î–ê–ù–ò–ï –ë–î ===
conn = sqlite3.connect('accuracy.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS predictions
              (timestamp TEXT, prediction TEXT, result TEXT)''')
conn.commit()

# === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
def get_klines(symbol="BTCUSDT", interval="15", limit=100):
    data = session.get_kline(
        category="linear",
        symbol=symbol,
        interval=interval,
        limit=limit
    )["result"]["list"]
    df = pd.DataFrame(data, columns=["timestamp", "open", "high", "low", "close", "volume", "turnover"])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df[["open", "high", "low", "close", "volume"]] = df[["open", "high", "low", "close", "volume"]].astype(float)
    return df

# === –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
def calculate_indicators(df):
    df["rsi"] = momentum.RSIIndicator(df["close"]).rsi()
    df["ema21"] = trend.EMAIndicator(df["close"], window=21).ema_indicator()
    df["adx"] = trend.ADXIndicator(df["high"], df["low"], df["close"]).adx()
    df["cci"] = trend.CCIIndicator(df["high"], df["low"], df["close"]).cci()
    df["stoch_k"] = momentum.StochasticOscillator(df["high"], df["low"], df["close"]).stoch()
    df["roc"] = momentum.ROCIndicator(df["close"]).roc()
    df["sma20"] = trend.SMAIndicator(df["close"], window=20).sma_indicator()
    bb = volatility.BollingerBands(df["close"])
    df["bb_bbm"] = bb.bollinger_mavg()
    df["wr"] = momentum.WilliamsRIndicator(df["high"], df["low"], df["close"]).williams_r()
    df["obv"] = volume.OnBalanceVolumeIndicator(df["close"], df["volume"]).on_balance_volume()
    df.dropna(inplace=True)
    return df

# === –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï ===
def make_prediction(df):
    last = df.iloc[-1]
    votes = []

    if last["rsi"] < 30: votes.append("long")
    elif last["rsi"] > 70: votes.append("short")

    if last["close"] > last["ema21"]: votes.append("long")
    else: votes.append("short")

    if last["adx"] > 25: votes.append("trend")
    if last["cci"] > 100: votes.append("long")
    elif last["cci"] < -100: votes.append("short")

    if last["stoch_k"] < 20: votes.append("long")
    elif last["stoch_k"] > 80: votes.append("short")

    if last["roc"] > 0: votes.append("long")
    else: votes.append("short")

    if last["close"] > last["sma20"]: votes.append("long")
    else: votes.append("short")

    if last["close"] > last["bb_bbm"]: votes.append("long")
    else: votes.append("short")

    if last["wr"] < -80: votes.append("long")
    elif last["wr"] > -20: votes.append("short")

    long_votes = votes.count("long")
    short_votes = votes.count("short")

    if long_votes > short_votes:
        return "LONG"
    elif short_votes > long_votes:
        return "SHORT"
    else:
        return "NEUTRAL"

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
@bot.message_handler(commands=["start", "signal"])
def handle_command(message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        return

    if message.text == "/start":
        bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /signal –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
    elif message.text == "/signal":
        df = calculate_indicators(get_klines())
        prediction = make_prediction(df)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO predictions (timestamp, prediction, result) VALUES (?, ?, ?)", (timestamp, prediction, "pending"))
        conn.commit()
        bot.send_message(message.chat.id, f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 15 –º–∏–Ω—É—Ç: *{prediction}*", parse_mode="Markdown")

# === –ê–í–¢–û–ü–†–û–ì–ù–û–ó ===
def auto_update():
    while True:
        try:
            df = calculate_indicators(get_klines())
            prediction = make_prediction(df)
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("INSERT INTO predictions (timestamp, prediction, result) VALUES (?, ?, ?)", (timestamp, prediction, "pending"))
            conn.commit()
            bot.send_message(AUTHORIZED_USER_ID, f"üîÑ –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑: *{prediction}*", parse_mode="Markdown")
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è]: {e}")
        time.sleep(15 * 60)

threading.Thread(target=auto_update, daemon=True).start()

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
bot.polling(none_stop=True)
