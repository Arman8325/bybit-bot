import openai
import os
import telebot
from telebot import types
from pybit.unified_trading import HTTP

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
openai.api_key = OPENAI_API_KEY

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
def get_market_data():
    try:
        candles = session.get_kline(category="linear", symbol="BTCUSDT", interval="15", limit=200)
        last_close = float(candles['result']['list'][-1][4])
        prev_close = float(candles['result']['list'][-2][4])
        change = last_close - prev_close
        direction = "üî∫ LONG (–≤–≤–µ—Ä—Ö)" if change > 0 else "üîª SHORT (–≤–Ω–∏–∑)"
        return f"üìä –ó–∞–∫—Ä—ã—Ç–∏–µ: {last_close}\nüìâ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {prev_close}\nüìà –°–∏–≥–Ω–∞–ª: {direction}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("/signal")
    markup.add(btn1)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª.", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /signal
@bot.message_handler(commands=['signal'])
def send_signal(message):
    bot.send_message(message.chat.id, "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")
    market_info = get_market_data()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ ChatGPT
    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∂–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞."},
                {"role": "user", "content": f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n{market_info}"}
            ]
        )
        chatgpt_response = completion['choices'][0]['message']['content']
        bot.send_message(message.chat.id, f"ü§ñ –ê–Ω–∞–ª–∏–∑ ChatGPT:\n{chatgpt_response}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ChatGPT:\n{e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
