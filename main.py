import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from pybit.unified_trading import HTTP
from openai import OpenAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
bybit = HTTP(
    api_key=os.getenv("BYBIT_API_KEY"),
    api_secret=os.getenv("BYBIT_API_SECRET")
)
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ö–Ω–æ–ø–∫–∞
markup = ReplyKeyboardMarkup(resize_keyboard=True)
markup.add(KeyboardButton("/signal"))

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /signal, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑.", reply_markup=markup)

@bot.message_handler(commands=['signal'])
def get_signal(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")

        candles = bybit.get_kline(
            category="linear", symbol="BTCUSDT", interval="15", limit=100
        )

        if not candles.get('result') or not candles['result'].get('list'):
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit.")
            return

        last_candle = candles['result']['list'][-1]
        prev_candle = candles['result']['list'][-2]

        close = float(last_candle[4])
        prev_close = float(prev_candle[4])

        # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        message_text = f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {close}\n–ü—Ä–µ–¥—ã–¥—É—â–∞—è: {prev_close}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        chat_response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —Ç—Ä–µ–π–¥–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏–∫. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é long –∏–ª–∏ short."},
                {"role": "user", "content": f"{message_text}"}
            ]
        )

        gpt_reply = chat_response.choices[0].message.content

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, f"üìä –ó–∞–∫—Ä—ã—Ç–∏–µ: {close}\nüìâ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {prev_close}\nü§ñ ChatGPT:",)
        bot.send_message(message.chat.id, gpt_reply)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ChatGPT:\n{str(e)}")

bot.polling()
