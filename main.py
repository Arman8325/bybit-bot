import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from pybit.unified_trading import HTTP
import openai
from dotenv import load_dotenv

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
openai.api_key = os.getenv("OPENAI_API_KEY")
session = HTTP(api_key=os.getenv("BYBIT_API_KEY"), api_secret=os.getenv("BYBIT_API_SECRET"))

# –ö–Ω–æ–ø–∫–∏
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("/signal"), KeyboardButton("/status"), KeyboardButton("/help"))

@bot.message_handler(commands=['start', 'help'])
def welcome(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç.\n–ù–∞–∂–º–∏ /signal –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n/status ‚Äî –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
        reply_markup=keyboard
    )

@bot.message_handler(commands=['status'])
def status(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É!")

@bot.message_handler(commands=['signal'])
def get_signal(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")
        candles = session.get_kline(category="linear", symbol="BTCUSDT", interval="15", limit=100)

        if 'result' not in candles or 'list' not in candles['result']:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Bybit.")
            return

        last = candles['result']['list'][-1]
        prev = candles['result']['list'][-2]

        close = float(last[4])
        prev_close = float(prev[4])

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è ChatGPT
        prompt = f"""
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ —Å Bybit:
        - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: {close}
        - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: {prev_close}
        - –¢–∞–π–º—Ñ—Ä–µ–π–º: 15 –º–∏–Ω—É—Ç

        –í—ã–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: LONG (–≤–≤–µ—Ä—Ö) –∏–ª–∏ SHORT (–≤–Ω–∏–∑), –∞ —Ç–∞–∫–∂–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.
        """

        chat_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )

        result = chat_response['choices'][0]['message']['content']
        bot.send_message(message.chat.id, f"üìà –°–∏–≥–Ω–∞–ª –æ—Ç ChatGPT:\n{result}")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:\n{str(e)}")

# –ó–∞–ø—É—Å–∫
bot.polling()


       
