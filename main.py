import telebot
import os
from pybit.unified_trading import HTTP
import pandas as pd
import numpy as np
import talib

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏ Bybit
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /signal, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª.")

@bot.message_handler(commands=['signal'])
def signal_handler(message):
    try:
        bot.send_message(message.chat.id, "\u23f3 –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        response = session.get_kline(
            category="linear",
            symbol="BTCUSDT",
            interval="15",
            limit=100
        )

        candles = response.get("result", {}).get("list", [])
        if len(candles) < 50:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        df = pd.DataFrame(candles, columns=[
            "timestamp", "open", "high", "low", "close", "volume", "turnover"
        ])

        df = df.astype(float)

        close = df["close"].values
        high = df["high"].values
        low = df["low"].values
        volume = df["volume"].values

        rsi = talib.RSI(close, timeperiod=14)[-1]
        macd, macdsignal, _ = talib.MACD(close, fastperiod=12, slowperiod=26, signalperiod=9)
        ema9 = talib.EMA(close, timeperiod=9)[-1]
        ema21 = talib.EMA(close, timeperiod=21)[-1]
        sma50 = talib.SMA(close, timeperiod=50)[-1]
        upper, middle, lower = talib.BBANDS(close, timeperiod=20)

        last_close = close[-1]
        prev_close = close[-2]

        if last_close > prev_close:
            signal = "\ud83d\udd39 LONG (–≤–≤–µ—Ä—Ö)"
        elif last_close < prev_close:
            signal = "\ud83d\udd3b SHORT (–≤–Ω–∏–∑)"
        else:
            signal = "‚ûñ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

        response_msg = f"""
üìä –ó–∞–∫—Ä—ã—Ç–∏–µ: {last_close:.2f}
üìâ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {prev_close:.2f}
‚ÑπÔ∏è RSI: {rsi:.2f}
üìâ MACD: {macd[-1]:.2f}, —Å–∏–≥–Ω–∞–ª: {macdsignal[-1]:.2f}
üìà EMA9: {ema9:.2f}, EMA21: {ema21:.2f}
üìä SMA50: {sma50:.2f}
üìé Bollinger Bands: –í–µ—Ä—Ö–Ω—è—è {upper[-1]:.2f}, –°—Ä–µ–¥–Ω—è—è {middle[-1]:.2f}, –ù–∏–∂–Ω—è—è {lower[-1]:.2f}
üìå –°–∏–≥–Ω–∞–ª: {signal}
        """
        bot.send_message(message.chat.id, response_msg)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

bot.polling()
