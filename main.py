import telebot
import os
import numpy as np
import talib
from pybit.unified_trading import HTTP

# –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
session = HTTP(
    api_key=os.getenv("BYBIT_API_KEY"),
    api_secret=os.getenv("BYBIT_API_SECRET")
)

def get_candles(symbol="BTCUSDT", interval="15", limit=100):
    try:
        response = session.get_kline(
            category="linear",
            symbol=symbol,
            interval=interval,
            limit=limit
        )
        return response["result"]["list"]
    except Exception as e:
        return None

def analyze_indicators(candles):
    closes = np.array([float(c[4]) for c in candles], dtype=float)
    highs = np.array([float(c[2]) for c in candles], dtype=float)
    lows = np.array([float(c[3]) for c in candles], dtype=float)
    volumes = np.array([float(c[5]) for c in candles], dtype=float)

    rsi = talib.RSI(closes, timeperiod=14)[-1]
    macd, macdsignal, _ = talib.MACD(closes)
    ema9 = talib.EMA(closes, timeperiod=9)[-1]
    ema21 = talib.EMA(closes, timeperiod=21)[-1]
    sma50 = talib.SMA(closes, timeperiod=50)[-1]
    upper, middle, lower = talib.BBANDS(closes)

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
    if rsi < 30 and ema9 > ema21 and closes[-1] > middle[-1]:
        signal = "üî∫ LONG (–≤–≤–µ—Ä—Ö)"
    elif rsi > 70 and ema9 < ema21 and closes[-1] < middle[-1]:
        signal = "üîª SHORT (–≤–Ω–∏–∑)"
    else:
        signal = "‚ûñ NEUTRAL"

    return {
        "close": closes[-1],
        "previous": closes[-2],
        "rsi": round(rsi, 2),
        "macd": round(macd[-1], 2),
        "macd_signal": round(macdsignal[-1], 2),
        "ema9": round(ema9, 2),
        "ema21": round(ema21, 2),
        "sma50": round(sma50, 2),
        "volume": round(volumes[-1], 2),
        "bb_upper": round(upper[-1], 2),
        "bb_middle": round(middle[-1], 2),
        "bb_lower": round(lower[-1], 2),
        "signal": signal
    }

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /signal, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞.")

@bot.message_handler(commands=['signal'])
def get_signal(message):
    bot.send_message(message.chat.id, "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")
    candles = get_candles()
    if not candles:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit.")
        return

    indicators = analyze_indicators(candles)

    text = f"""
üìä –ó–∞–∫—Ä—ã—Ç–∏–µ: {indicators['close']}
üìâ –ü—Ä–µ–¥—ã–¥—É—â–∞—è: {indicators['previous']}
‚ÑπÔ∏è RSI: {indicators['rsi']}
üìâ MACD: {indicators['macd']} | —Å–∏–≥–Ω–∞–ª: {indicators['macd_signal']}
üìà EMA9: {indicators['ema9']} | EMA21: {indicators['ema21']}
üìè SMA50: {indicators['sma50']}
üìé BB: –í–µ—Ä—Ö–Ω—è—è {indicators['bb_upper']}, –°—Ä–µ–¥–Ω—è—è {indicators['bb_middle']}, –ù–∏–∂–Ω—è—è {indicators['bb_lower']}
üîä –û–±—ä—ë–º: {indicators['volume']}
üìå –°–∏–≥–Ω–∞–ª: {indicators['signal']}
    """
    bot.send_message(message.chat.id, text.strip())

bot.polling()
