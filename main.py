import telebot
from telebot import types
import os
import pandas as pd
from io import BytesIO
from pybit.unified_trading import HTTP
from datetime import datetime, timedelta
import ta
import sqlite3
import threading
import time
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
AUTHORIZED_USER_ID = int(os.getenv("AUTHORIZED_USER_ID"))
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
session = HTTP(api_key=os.getenv("BYBIT_API_KEY"), api_secret=os.getenv("BYBIT_API_SECRET"))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
conn = sqlite3.connect("predictions.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS predictions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp TEXT,
    price REAL,
    signal TEXT,
    actual TEXT,
    votes TEXT,
    timeframe TEXT
)
""")
conn.commit()

# === –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ ===
def get_candles(interval="15", limit=100):
    return session.get_kline(category="linear", symbol="BTCUSDT", interval=interval, limit=limit)["result"]["list"]

# === –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ===
def analyze_indicators(df):
    df = df.astype({'close':'float','high':'float','low':'float'})
    return {
        "RSI": ta.momentum.RSIIndicator(df["close"]).rsi().iloc[-1],
        "EMA21": ta.trend.EMAIndicator(df["close"], window=21).ema_indicator().iloc[-1],
        "ADX": ta.trend.ADXIndicator(df["high"], df["low"], df["close"]).adx().iloc[-1],
        "CCI": ta.trend.CCIIndicator(df["high"], df["low"], df["close"]).cci().iloc[-1],
        "Stochastic": ta.momentum.StochasticOscillator(df["high"], df["low"], df["close"]).stoch().iloc[-1],
        "Momentum": ta.momentum.ROCIndicator(df["close"]).roc().iloc[-1],
        "BOLL_UP": ta.volatility.BollingerBands(df["close"]).bollinger_hband().iloc[-1],
        "BOLL_LOW": ta.volatility.BollingerBands(df["close"]).bollinger_lband().iloc[-1],
        "SAR": ta.trend.PSARIndicator(df["high"], df["low"], df["close"]).psar().iloc[-1],
        "MACD": ta.trend.MACD(df["close"]).macd().iloc[-1],
        "WR": ta.momentum.WilliamsRIndicator(df["high"], df["low"], df["close"]).williams_r().iloc[-1]
    }

# === –°–æ–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å–∞ ===
def make_prediction(ind, last):
    votes=[]
    if ind["RSI"]>60: votes.append("LONG")
    elif ind["RSI"]<40: votes.append("SHORT")
    votes.append("LONG" if last>ind["EMA21"] else "SHORT")
    if ind["ADX"]>25: votes.append("LONG")
    if ind["CCI"]>100: votes.append("LONG")
    elif ind["CCI"]<-100: votes.append("SHORT")
    if ind["Stochastic"]>80: votes.append("SHORT")
    elif ind["Stochastic"]<20: votes.append("LONG")
    votes.append("LONG" if ind["Momentum"]>0 else "SHORT")
    if last>ind["BOLL_UP"]: votes.append("SHORT")
    elif last<ind["BOLL_LOW"]: votes.append("LONG")
    votes.append("LONG" if last>ind["SAR"] else "SHORT")
    votes.append("LONG" if ind["MACD"]>0 else "SHORT")
    if ind["WR"]<-80: votes.append("LONG")
    elif ind["WR"]>-20: votes.append("SHORT")
    return ("LONG" if votes.count("LONG")>votes.count("SHORT") else 
            "SHORT" if votes.count("SHORT")>votes.count("LONG") else "NEUTRAL",
            votes)

# === –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ 100% LONG ===
def is_entry_opportunity(ind, last, votes):
    # –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å LONG
    return votes.count("LONG")==len(votes)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ ===
def process_signal(chat_id, interval):
    raw=get_candles(interval)
    df=pd.DataFrame(raw,columns=["timestamp","open","high","low","close","volume","turnover"])
    ind=analyze_indicators(df)
    last=float(df["close"].iloc[-1])
    prev=float(df["close"].iloc[-2])
    signal,votes=make_prediction(ind,last)
    ts=datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute(
        "INSERT INTO predictions (timestamp,price,signal,actual,votes,timeframe) VALUES (?,?,?,?,?,?)",
        (ts,last,signal,None,",".join(votes),interval)
    )
    conn.commit()

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    text=f"üìà –ó–∞–∫—Ä—ã—Ç–∏–µ: {last}\nüìâ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {prev}\n"
    for k,v in ind.items(): text+=f"üîπ {k}: {round(v,2)}\n"
    text+=f"\nüìå –ü—Ä–æ–≥–Ω–æ–∑: {'üî∫LONG' if signal=='LONG' else 'üîªSHORT' if signal=='SHORT' else '‚ö™Ô∏èNEUTRAL'}"
    text+=f"\nüß† –ì–æ–ª–æ—Å–∞: {votes}"
    bot.send_message(chat_id,text)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def make_reply_keyboard():
    kb=types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("15–º","30–º","1—á")
    kb.row("–ü—Ä–æ–≤–µ—Ä–∫–∞","–¢–æ—á–Ω–æ—Å—Ç—å")
    kb.row("Export CSV","Export Excel")
    return kb

@bot.message_handler(commands=['start'])
def start(m):
    if m.from_user.id!=AUTHORIZED_USER_ID:
        return bot.send_message(m.chat.id,"‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    bot.send_message(m.chat.id,"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!",reply_markup=make_reply_keyboard())

@bot.message_handler(func=lambda m:m.chat.id==AUTHORIZED_USER_ID)
def handler(m):
    t=m.text.strip()
    if t=="15–º": process_signal(m.chat.id,"15")
    elif t=="30–º": process_signal(m.chat.id,"30")
    elif t=="1—á": process_signal(m.chat.id,"60")
    # ... —Å—é–¥–∞ –≤–∞—à–∏ verify, accuracy, export handlers ...

# === –ê–≤—Ç–æ‚Äë–≤—Ö–æ–¥ –∑–∞ 1 –º–∏–Ω –¥–æ –Ω–æ–≤–æ–π —Å–≤–µ—á–∏ —Å 100% —É—Å–ª–æ–≤–∏–µ–º ===
entry_flag=False
entry_time=0
COOLDOWN=15*60

def auto_entry_signal():
    global entry_flag, entry_time
    while True:
        now=datetime.utcnow()
        # –º–∏–Ω—É—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π 15‚Äë–º–∏–Ω —Å–≤–µ—á–µ–π: %15==14
        if now.minute%15==14:
            raw=get_candles("15")
            df=pd.DataFrame(raw,columns=["timestamp","open","high","low","close","volume","turnover"])
            ind=analyze_indicators(df)
            last=float(df["close"].iloc[-1])
            _,votes=make_prediction(ind,last)
            can=is_entry_opportunity(ind,last,votes)
            ts=time.time()
            if can and (not entry_flag or ts-entry_time>=COOLDOWN):
                msg=(
                    "üîî *100% –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ LONG!*  \n"
                    f"–¶–µ–Ω–∞: {last}\n"
                    f"–ì–æ–ª–æ—Å–∞: {votes}"
                )
                bot.send_message(AUTHORIZED_USER_ID,msg,parse_mode="Markdown")
                entry_flag=True
                entry_time=ts
            if not can:
                entry_flag=False
                entry_time=0
            time.sleep(60-now.second)
        else:
            time.sleep(60-now.second)

threading.Thread(target=auto_entry_signal,daemon=True).start()

# === –ó–∞–ø—É—Å–∫ ===
bot.polling(none_stop=True)
