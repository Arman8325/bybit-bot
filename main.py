import telebot
import os
from pybit.unified_trading import HTTP
import pandas as pd
import ta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))

session = HTTP(
    api_key=os.getenv("BYBIT_API_KEY"),
    api_secret=os.getenv("BYBIT_API_SECRET")
)

def get_candles(symbol="BTCUSDT", interval="15", limit=100):
    try:
        candles = session.get_kline(
            category="linear",
            symbol=symbol,
            interval=interval,
            limit=limit
        )
        return candles["result"]["list"]
    except Exception as e:
        return None

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /signal –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞.")

@bot.message_handler(commands=['signal'])
def send_signal(message):
    bot.send_message(message.chat.id, "üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")

    try:
        data = get_candles()
        if data is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Bybit.")

        df = pd.DataFrame(data, columns=["timestamp", "open", "high", "low", "close", "volume", "turnover"])
        df["close"] = df["close"].astype(float)
        df["high"] = df["high"].astype(float)
        df["low"] = df["low"].astype(float)
        df["volume"] = df["volume"].astype(float)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = ta.momentum.RSIIndicator(df["close"]).rsi().iloc[-1]
        ema = ta.trend.EMAIndicator(df["close"], window=21).ema_indicator().iloc[-1]
        adx = ta.trend.ADXIndicator(df["high"], df["low"], df["close"]).adx().iloc[-1]
        cci = ta.trend.CCIIndicator(df["high"], df["low"], df["close"]).cci().iloc[-1]
        stoch = ta.momentum.StochasticOscillator(df["high"], df["low"], df["close"]).stoch().iloc[-1]
        momentum = ta.momentum.ROCIndicator(df["close"]).roc().iloc[-1]
        bb = ta.volatility.BollingerBands(df["close"])
        bb_mid = bb.bollinger_mavg().iloc[-1]

        last_close = df["close"].iloc[-1]
        prev_close = df["close"].iloc[-2]

        # –°–∏–≥–Ω–∞–ª –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
        if last_close > prev_close:
            signal = "üî∫ LONG (–≤–≤–µ—Ä—Ö)"
        elif last_close < prev_close:
            signal = "üîª SHORT (–≤–Ω–∏–∑)"
        else:
            signal = "‚ûñ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 15 –º–∏–Ω—É—Ç
        forecast = "NEUTRAL"
        reasons = []

        if adx > 20:
            if momentum > 0 and rsi > 55 and cci > 50 and last_close > ema:
                forecast = "LONG"
                reasons.append("–¶–µ–Ω–∞ –≤—ã—à–µ EMA, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–∏–ª—É —Ä–æ—Å—Ç–∞")
            elif momentum < 0 and rsi < 45 and cci < -50 and last_close < ema:
                forecast = "SHORT"
                reasons.append("–¶–µ–Ω–∞ –Ω–∏–∂–µ EMA, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ")
            else:
                reasons.append("–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –Ω–µ—Ç —è—Å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
        else:
            forecast = "NEUTRAL"
            reasons.append("ADX < 20 ‚Äî —Å–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥, –≤–æ–∑–º–æ–∂–µ–Ω —Ñ–ª—ç—Ç")

        bot.send_message(message.chat.id, f"""
üìà –ó–∞–∫—Ä—ã—Ç–∏–µ: {last_close}
üìâ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {prev_close}
üìä RSI: {round(rsi, 2)}
üìà EMA21: {round(ema, 2)}
üìä ADX: {round(adx, 2)}
üìä CCI: {round(cci, 2)}
üìä Stochastic: {round(stoch, 2)}
üìä Momentum: {round(momentum, 2)}
üìä Bollinger Mid: {round(bb_mid, 2)}
üìå –°–∏–≥–Ω–∞–ª: {signal}
üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 15 –º–∏–Ω—É—Ç: {forecast}
‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {', '.join(reasons)}
        """)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

bot.polling()
