import telebot
import os
from pybit.unified_trading import HTTP
import pandas as pd
import ta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
session = HTTP(api_key=os.getenv("BYBIT_API_KEY"), api_secret=os.getenv("BYBIT_API_SECRET"))

def get_candles(symbol="BTCUSDT", interval="15", limit=100):
    try:
        candles = session.get_kline(
            category="linear", symbol=symbol, interval=interval, limit=limit
        )
        return candles["result"]["list"]
    except Exception as e:
        return None

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /signal –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 15 –º–∏–Ω—É—Ç.")

@bot.message_handler(commands=['signal'])
def send_signal(message):
    bot.send_message(message.chat.id, "üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")

    try:
        data = get_candles()
        if data is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Bybit.")

        df = pd.DataFrame(data, columns=["timestamp", "open", "high", "low", "close", "volume", "turnover"])
        df["close"] = df["close"].astype(float)
        df["high"] = df["high"].astype(float)
        df["low"] = df["low"].astype(float)
        df["volume"] = df["volume"].astype(float)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = ta.momentum.RSIIndicator(df["close"]).rsi().iloc[-1]
        ema = ta.trend.EMAIndicator(df["close"], window=21).ema_indicator().iloc[-1]
        adx = ta.trend.ADXIndicator(df["high"], df["low"], df["close"]).adx().iloc[-1]
        cci = ta.trend.CCIIndicator(df["high"], df["low"], df["close"]).cci().iloc[-1]
        stoch = ta.momentum.StochasticOscillator(df["high"], df["low"], df["close"]).stoch().iloc[-1]
        momentum = ta.momentum.ROCIndicator(df["close"]).roc().iloc[-1]
        bb = ta.volatility.BollingerBands(df["close"])
        bb_mid = bb.bollinger_mavg().iloc[-1]
        psar = ta.trend.PSARIndicator(df["high"], df["low"], df["close"]).psar().iloc[-1]
        macd = ta.trend.MACD(df["close"])
        macd_line = macd.macd().iloc[-1]
        signal_line = macd.macd_signal().iloc[-1]

        last_close = df["close"].iloc[-1]
        prev_close = df["close"].iloc[-2]

        # üîç –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        score = 0
        reasons = []

        if rsi < 30:
            score += 1
            reasons.append("RSI < 30 ‚Üí –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–≤–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç)")
        elif rsi > 70:
            score -= 1
            reasons.append("RSI > 70 ‚Üí –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–≤–æ–∑–º–æ–∂–µ–Ω —Å–ø–∞–¥)")

        if last_close > ema:
            score += 1
            reasons.append("–¶–µ–Ω–∞ –≤—ã—à–µ EMA ‚Üí –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        else:
            score -= 1
            reasons.append("–¶–µ–Ω–∞ –Ω–∏–∂–µ EMA ‚Üí –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")

        if macd_line > signal_line:
            score += 1
            reasons.append("MACD > —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ ‚Üí –±—ã—á–∏–π –∏–º–ø—É–ª—å—Å")
        else:
            score -= 1
            reasons.append("MACD < —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ ‚Üí –º–µ–¥–≤–µ–∂–∏–π –∏–º–ø—É–ª—å—Å")

        if momentum > 0:
            score += 1
            reasons.append("Momentum –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ‚Üí —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞")
        else:
            score -= 1
            reasons.append("Momentum –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ‚Üí –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è")

        if adx > 20:
            score += 1
            reasons.append("ADX > 20 ‚Üí –µ—Å—Ç—å —Ç—Ä–µ–Ω–¥")
        else:
            reasons.append("ADX < 20 ‚Üí —Ä—ã–Ω–æ–∫ —Å–ª–∞–±—ã–π/—Ñ–ª—ç—Ç")

        # üß† –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 15 –º–∏–Ω—É—Ç
        if score >= 2:
            forecast = "üîÆ –ü—Ä–æ–≥–Ω–æ–∑: LONG (—Ä–æ—Å—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç)"
        elif score <= -2:
            forecast = "üîÆ –ü—Ä–æ–≥–Ω–æ–∑: SHORT (–ø–∞–¥–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç)"
        else:
            forecast = "üîÆ –ü—Ä–æ–≥–Ω–æ–∑: NEUTRAL (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å)"

        # –û—Ç–≤–µ—Ç
        bot.send_message(message.chat.id, f"""
üìà –ó–∞–∫—Ä—ã—Ç–∏–µ: {last_close}
üìâ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {prev_close}
üìä RSI: {round(rsi, 2)}
üìà EMA21: {round(ema, 2)}
üìä ADX: {round(adx, 2)}
üìä CCI: {round(cci, 2)}
üìä Stochastic: {round(stoch, 2)}
üìä Momentum: {round(momentum, 2)}
üìä Bollinger Mid: {round(bb_mid, 2)}
üìä SAR: {round(psar, 2)}
üìä MACD: {round(macd_line, 2)} | –°–∏–≥–Ω–∞–ª—å–Ω–∞—è: {round(signal_line, 2)}
üìå –¢–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª: {"üî∫ LONG" if last_close > prev_close else "üîª SHORT" if last_close < prev_close else "‚ö™Ô∏è NEUTRAL"}

{forecast}

üìã –ü—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–≥–Ω–æ–∑–∞:
- {chr(10).join(reasons)}
        """)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

bot.polling()
