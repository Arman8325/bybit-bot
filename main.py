import telebot
import os
from pybit.unified_trading import HTTP
import pandas as pd
import ta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))

session = HTTP(
    api_key=os.getenv("BYBIT_API_KEY"),
    api_secret=os.getenv("BYBIT_API_SECRET")
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–≤–µ—á–∞–º
def get_candles(symbol="BTCUSDT", interval="15", limit=100):
    try:
        candles = session.get_kline(
            category="linear",
            symbol=symbol,
            interval=interval,
            limit=limit
        )
        return candles["result"]["list"]
    except Exception as e:
        return None

# –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ (–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞ –≤ –±—É–¥—É—â–µ–º)
indicator_weights = {
    "rsi": 0.9,
    "ema": 0.8,
    "adx": 0.75,
    "cci": 0.7,
    "stoch": 0.85,
    "momentum": 0.65,
    "bb": 0.8,
    "wr": 0.6,
    "sma": 0.7
}

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /signal –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 15 –º–∏–Ω—É—Ç.")

@bot.message_handler(commands=['signal'])
def send_signal(message):
    bot.send_message(message.chat.id, "üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")

    try:
        data = get_candles()
        if data is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Bybit.")

        df = pd.DataFrame(data, columns=["timestamp", "open", "high", "low", "close", "volume", "turnover"])
        df["close"] = df["close"].astype(float)
        df["high"] = df["high"].astype(float)
        df["low"] = df["low"].astype(float)
        df["volume"] = df["volume"].astype(float)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        rsi = ta.momentum.RSIIndicator(df["close"]).rsi().iloc[-1]
        ema = ta.trend.EMAIndicator(df["close"], window=21).ema_indicator().iloc[-1]
        adx = ta.trend.ADXIndicator(df["high"], df["low"], df["close"]).adx().iloc[-1]
        cci = ta.trend.CCIIndicator(df["high"], df["low"], df["close"]).cci().iloc[-1]
        stoch = ta.momentum.StochasticOscillator(df["high"], df["low"], df["close"]).stoch().iloc[-1]
        momentum = ta.momentum.ROCIndicator(df["close"]).roc().iloc[-1]
        bb = ta.volatility.BollingerBands(df["close"])
        bb_mid = bb.bollinger_mavg().iloc[-1]
        wr = ta.momentum.WilliamsRIndicator(df["high"], df["low"], df["close"]).williams_r().iloc[-1]
        sma = ta.trend.SMAIndicator(df["close"], window=20).sma_indicator().iloc[-1]

        last_close = df["close"].iloc[-1]
        prev_close = df["close"].iloc[-2]

        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ)
        score = 0
        total_weight = 0

        def apply_vote(condition, weight):
            nonlocal score, total_weight
            score += weight if condition else -weight
            total_weight += weight

        apply_vote(rsi > 50, indicator_weights["rsi"])
        apply_vote(last_close > ema, indicator_weights["ema"])
        apply_vote(adx > 20, indicator_weights["adx"])
        apply_vote(cci > 0, indicator_weights["cci"])
        apply_vote(stoch > 50, indicator_weights["stoch"])
        apply_vote(momentum > 0, indicator_weights["momentum"])
        apply_vote(last_close > bb_mid, indicator_weights["bb"])
        apply_vote(wr > -50, indicator_weights["wr"])
        apply_vote(last_close > sma, indicator_weights["sma"])

        signal_strength = score / total_weight

        if signal_strength > 0.25:
            forecast = "üü¢ –ü—Ä–æ–≥–Ω–æ–∑: –£–≤–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç (LONG)"
        elif signal_strength < -0.25:
            forecast = "üî¥ –ü—Ä–æ–≥–Ω–æ–∑: –£–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ (SHORT)"
        else:
            forecast = "‚ö™Ô∏è –ü—Ä–æ–≥–Ω–æ–∑: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ / –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ"

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, f"""
üìà –ó–∞–∫—Ä—ã—Ç–∏–µ: {last_close}
üìâ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {prev_close}
üìä RSI: {round(rsi, 2)}
üìà EMA21: {round(ema, 2)}
üìä ADX: {round(adx, 2)}
üìä CCI: {round(cci, 2)}
üìä Stochastic: {round(stoch, 2)}
üìä Momentum: {round(momentum, 2)}
üìä Bollinger Mid: {round(bb_mid, 2)}
üìä Williams %R: {round(wr, 2)}
üìä SMA20: {round(sma, 2)}
üìå {forecast}
        """)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

bot.polling()

