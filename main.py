import telebot
import numpy as np
import talib
from pybit.unified_trading import HTTP

# –í—Ä–µ–º–µ–Ω–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–∑–∞–º–µ–Ω–∏ —Å–≤–æ–∏–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
TELEGRAM_BOT_TOKEN = 7725284250:AAFQi1jp4yWefZJExHlXOoLQWEPLdrnuk4w
BYBIT_API_KEY = "IyFHgr8YtnCz60D27D"
BYBIT_API_SECRET = "kxj3fry4US9lZq2nyDZIVKMgSaTd7U7vPp53"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
def get_candles(symbol="BTCUSDT", interval="15", limit=100):
    try:
        response = session.get_kline(
            category="linear",
            symbol=symbol,
            interval=interval,
            limit=limit
        )
        return response["result"]["list"]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π:", e)
        return None

# –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –±–µ–∑ ChatGPT
def analyze_indicators(candle_data):
    closes = np.array([float(c[4]) for c in candle_data], dtype=float)
    highs = np.array([float(c[2]) for c in candle_data], dtype=float)
    lows = np.array([float(c[3]) for c in candle_data], dtype=float)
    volumes = np.array([float(c[5]) for c in candle_data], dtype=float)

    rsi = talib.RSI(closes, timeperiod=14)[-1]
    macd, macdsignal, _ = talib.MACD(closes)
    ema_fast = talib.EMA(closes, timeperiod=9)[-1]
    ema_slow = talib.EMA(closes, timeperiod=21)[-1]

    # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ —Å–∏–≥–Ω–∞–ª–∞
    if rsi > 70 and ema_fast < ema_slow and macd[-1] < macdsignal[-1]:
        signal = "üîª SHORT (–≤–Ω–∏–∑)"
    elif rsi < 30 and ema_fast > ema_slow and macd[-1] > macdsignal[-1]:
        signal = "üî∫ LONG (–≤–≤–µ—Ä—Ö)"
    else:
        signal = "‚ûñ NEUTRAL (–≤–Ω–µ —Ä—ã–Ω–∫–∞)"

    return {
        "close": closes[-1],
        "previous": closes[-2],
        "rsi": round(rsi, 2),
        "macd": round(macd[-1], 2),
        "macd_signal": round(macdsignal[-1], 2),
        "ema9": round(ema_fast, 2),
        "ema21": round(ema_slow, 2),
        "volume": round(volumes[-1], 2),
        "signal": signal
    }

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /signal
@bot.message_handler(commands=['signal'])
def get_signal(message):
    bot.send_message(message.chat.id, "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")
    candles = get_candles()
    if not candles:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit")
        return

    indicators = analyze_indicators(candles)

    reply = f"""
üìä –ó–∞–∫—Ä—ã—Ç–∏–µ: {indicators['close']}
üìâ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {indicators['previous']}
‚ÑπÔ∏è RSI: {indicators['rsi']}
üìâ MACD: {indicators['macd']}, —Å–∏–≥–Ω–∞–ª: {indicators['macd_signal']}
üìà EMA9: {indicators['ema9']}, EMA21: {indicators['ema21']}
üìä –û–±—ä—ë–º: {indicators['volume']}
üìå –°–∏–≥–Ω–∞–ª: {indicators['signal']}
    """
    bot.send_message(message.chat.id, reply)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling()

