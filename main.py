# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π Telegram-–±–æ—Ç: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Bybit, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ ChatGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ Telegram

from flask import Flask, request
import telebot
import threading
import os
import openai
from pybit.unified_trading import HTTP

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.environ.get("BYBIT_API_KEY")
API_SECRET = os.environ.get("BYBIT_API_SECRET")
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

if not all([API_KEY, API_SECRET, BOT_TOKEN, OPENAI_API_KEY]):
    raise EnvironmentError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(BOT_TOKEN)
session = HTTP(api_key=API_KEY, api_secret=API_SECRET, testnet=False)
openai.api_key = OPENAI_API_KEY

app = Flask(__name__)

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /signal, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.")

@bot.message_handler(commands=['signal'])
def get_signal(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit...")

        candles = session.get_kline(category="linear", symbol="BTCUSDT", interval="15", limit=100)

        if not candles.get('result') or not candles['result'].get('list'):
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–µ—á–∞—Ö.")
            return

        # –ê–Ω–∞–ª–∏–∑ –ø–æ 13 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º (—ç–º—É–ª—è—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞)
        market_data = {
            "RSI": 54.2,
            "MACD": 1.7,
            "EMA20": 116800,
            "EMA50": 117200,
            "EMA200": 118000,
            "SMA20": 116950,
            "SMA50": 117300,
            "SMA200": 118100,
            "Bollinger_Upper": 117800,
            "Bollinger_Lower": 116400,
            "Stochastic_K": 65,
            "Stochastic_D": 60,
            "ADX": 24
        }

        prompt = f"""
–í–æ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ BTC/USDT:
{market_data}

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –≤—ã–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫—Ä–∞—Ç–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:
‚Äî –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG –∏–ª–∏ SHORT),
‚Äî —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (—Å–ª–∞–±—ã–π, —Å—Ä–µ–¥–Ω–∏–π, —Å–∏–ª—å–Ω—ã–π),
‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.
"""

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫, –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ –¥–∞—ë—à—å —Å–æ–≤–µ—Ç—ã —Ç—Ä–µ–π–¥–µ—Ä–∞–º."},
                {"role": "user", "content": prompt}
            ]
        )

        answer = response.choices[0].message.content.strip()
        bot.send_message(message.chat.id, f"üìà –°–∏–≥–Ω–∞–ª –æ—Ç ChatGPT:
{answer}")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")

threading.Thread(target=bot.polling, kwargs={"none_stop": True, "timeout": 60}, daemon=True).start()

@app.route('/')
def home():
    return 'ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway!'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))


